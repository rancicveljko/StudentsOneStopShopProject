// <auto-generated />
using System;
using Backend.KlaseZaRadSaPodacima.DBContexti;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(BazaDbContext))]
    [Migration("20210705120001_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.IstorijaIzmenaEntitet", b =>
                {
                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<Guid>("MaterijalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VremeIzmene")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipIzmene")
                        .HasColumnType("int");

                    b.HasKey("AutorID", "MaterijalID", "VremeIzmene");

                    b.HasIndex("MaterijalID");

                    b.ToTable("IstorijaIzmena");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KomentarEntitet", b =>
                {
                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<Guid>("MaterijalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VremeKomentarisanja")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OdgovorNaAutorID")
                        .HasColumnType("int");

                    b.Property<Guid?>("OdgovorNaMaterijalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OdgovorNaVremeKomentarisanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AutorID", "MaterijalID", "VremeKomentarisanja");

                    b.HasIndex("MaterijalID");

                    b.HasIndex("OdgovorNaAutorID", "OdgovorNaMaterijalID", "OdgovorNaVremeKomentarisanja");

                    b.ToTable("Komentari");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", b =>
                {
                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PoslednjaPromena")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusNaloga")
                        .HasColumnType("int");

                    b.Property<int>("Uloga")
                        .HasColumnType("int");

                    b.HasKey("KorisnikID");

                    b.HasIndex("KorisnickoIme")
                        .IsUnique();

                    b.ToTable("KorisnickiNalozi");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogOblastEntitet", b =>
                {
                    b.Property<int>("NadlezniID")
                        .HasColumnType("int");

                    b.Property<Guid>("OblastID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NadlezniID", "OblastID");

                    b.HasIndex("OblastID");

                    b.ToTable("OblastiINadlezni");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnikEntitet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.MaterijalEntitet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ekstenzija")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("IDNaFajlSistemu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KratakOpis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NadoblastID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UkupnaOcena")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDNaFajlSistemu")
                        .IsUnique();

                    b.HasIndex("NadoblastID", "Naziv", "Ekstenzija")
                        .IsUnique();

                    b.ToTable("Materijali");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.OblastEntitet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NadoblastID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PotrebnoOdobrenje")
                        .HasColumnType("bit");

                    b.Property<string>("Putanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("NadoblastID");

                    b.HasIndex("Putanja")
                        .IsUnique();

                    b.ToTable("Oblasti");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.OcenaEntitet", b =>
                {
                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<Guid>("MaterijalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("TipOcene")
                        .HasColumnType("smallint");

                    b.HasKey("AutorID", "MaterijalID");

                    b.HasIndex("MaterijalID");

                    b.ToTable("Ocene");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.OsnovniKorisnikPodaciEntitet", b =>
                {
                    b.Property<string>("IDBroj")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("Privilegije")
                        .HasColumnType("int");

                    b.HasKey("IDBroj");

                    b.HasIndex("KorisnikID")
                        .IsUnique();

                    b.ToTable("OsnovniKorisnikPodaci");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.ZahtevAdministratoruEntitet", b =>
                {
                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VremeSlanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjekatID")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tip")
                        .HasColumnType("int");

                    b.HasKey("AutorID", "VremeSlanja");

                    b.HasIndex("SubjekatID");

                    b.ToTable("AdministratorskiZahtevi");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.ZahtevZaDodavanjeIliAzuriranjeMaterijalaEntitet", b =>
                {
                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<Guid>("MaterijalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OblastID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipZahteva")
                        .HasColumnType("int");

                    b.HasKey("AutorID", "MaterijalID");

                    b.HasIndex("MaterijalID");

                    b.HasIndex("OblastID");

                    b.ToTable("ZahteviZaDodavanjeMaterijala");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.IstorijaIzmenaEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "Autor")
                        .WithMany("IstorijaIzmena")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.MaterijalEntitet", "Materijal")
                        .WithMany("Izmene")
                        .HasForeignKey("MaterijalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Materijal");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KomentarEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "Autor")
                        .WithMany("Komentari")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.MaterijalEntitet", "Materijal")
                        .WithMany("Komentari")
                        .HasForeignKey("MaterijalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KomentarEntitet", "OdgovorNa")
                        .WithMany("Odgovori")
                        .HasForeignKey("OdgovorNaAutorID", "OdgovorNaMaterijalID", "OdgovorNaVremeKomentarisanja");

                    b.Navigation("Autor");

                    b.Navigation("Materijal");

                    b.Navigation("OdgovorNa");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnikEntitet", "Korisnik")
                        .WithOne("KorisnickiNalog")
                        .HasForeignKey("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogOblastEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "Nadlezni")
                        .WithMany("NadlezanZaOblasti")
                        .HasForeignKey("NadlezniID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.OblastEntitet", "Oblast")
                        .WithMany("NadlezniKorisnici")
                        .HasForeignKey("OblastID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nadlezni");

                    b.Navigation("Oblast");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.MaterijalEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.OblastEntitet", "Nadoblast")
                        .WithMany("Materijali")
                        .HasForeignKey("NadoblastID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nadoblast");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.OblastEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.OblastEntitet", "Nadoblast")
                        .WithMany("Podoblasti")
                        .HasForeignKey("NadoblastID");

                    b.Navigation("Nadoblast");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.OcenaEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "Autor")
                        .WithMany("Ocene")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.MaterijalEntitet", "Materijal")
                        .WithMany("Ocene")
                        .HasForeignKey("MaterijalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Materijal");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.OsnovniKorisnikPodaciEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnikEntitet", "Korisnik")
                        .WithOne("OsnovniKorisnikPodaci")
                        .HasForeignKey("Backend.KlaseZaRadSaPodacima.Entiteti.OsnovniKorisnikPodaciEntitet", "KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.ZahtevAdministratoruEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "Autor")
                        .WithMany("AutorAdministratorskogZahteva")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "Subjekat")
                        .WithMany("SubjekatAdministratorskogZahteva")
                        .HasForeignKey("SubjekatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Subjekat");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.ZahtevZaDodavanjeIliAzuriranjeMaterijalaEntitet", b =>
                {
                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", "Autor")
                        .WithMany("AutorZahtevaZaDodavanjeMaterijala")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.MaterijalEntitet", "Materijal")
                        .WithMany("SubjekatZahtevaZaDodavanje")
                        .HasForeignKey("MaterijalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.KlaseZaRadSaPodacima.Entiteti.OblastEntitet", "Oblast")
                        .WithMany("ZahteviZaDodavanjeMaterijala")
                        .HasForeignKey("OblastID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Materijal");

                    b.Navigation("Oblast");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KomentarEntitet", b =>
                {
                    b.Navigation("Odgovori");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnickiNalogEntitet", b =>
                {
                    b.Navigation("AutorAdministratorskogZahteva");

                    b.Navigation("AutorZahtevaZaDodavanjeMaterijala");

                    b.Navigation("IstorijaIzmena");

                    b.Navigation("Komentari");

                    b.Navigation("NadlezanZaOblasti");

                    b.Navigation("Ocene");

                    b.Navigation("SubjekatAdministratorskogZahteva");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.KorisnikEntitet", b =>
                {
                    b.Navigation("KorisnickiNalog");

                    b.Navigation("OsnovniKorisnikPodaci");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.MaterijalEntitet", b =>
                {
                    b.Navigation("Izmene");

                    b.Navigation("Komentari");

                    b.Navigation("Ocene");

                    b.Navigation("SubjekatZahtevaZaDodavanje");
                });

            modelBuilder.Entity("Backend.KlaseZaRadSaPodacima.Entiteti.OblastEntitet", b =>
                {
                    b.Navigation("Materijali");

                    b.Navigation("NadlezniKorisnici");

                    b.Navigation("Podoblasti");

                    b.Navigation("ZahteviZaDodavanjeMaterijala");
                });
#pragma warning restore 612, 618
        }
    }
}
